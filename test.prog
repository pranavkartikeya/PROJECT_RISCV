0000000000000000000000000000000000000
00000_0_0110_0000_0001_00000000000000   // ADD   REG[6] = REG[0] + REG[1] = 1 + 2 = 3
00001_0_0111_0010_0011_00000000000000   // SUB   REG[7] = REG[2] - REG[3] = 3 - 7 = -4 = 32'hFFFFFFFC
00010_0_1000_0100_0101_00000000000000   // MUL   REG[8] = REG[4] * REG[5] = 6 * 4 = 24
00011_0_1001_0011_0010_00000000000000   // DIV   REG[9] = REG[3] / REG[2] = 7 / 3 = 2
00100_0_1010_0100_0000_00000000000000   // MOD   REG[10] = REG[4] % REG[0] = 6 % 1 = 0
00110_0_1011_0010_0001_00000000000000   // AND   REG[11] = REG[2] & REG[1] = 3 & 2 = 2
00111_0_1100_0000_0101_00000000000000   // OR    REG[12] = REG[0] | REG[5] = 1 | 4 = 5
01000_0_1101_0100_0000_00000000000000   // NOT   REG[13] = ~REG[4] = ~6 = 32'hFFFFFFF9
01001_0_1110_0001_0000_00000000000000   // MOV   REG[14] = REG[1] = 2
01010_1_1111_0010_0000_00000000010000   // LSL   REG[15] = REG[2] << 5 = 3 << 5 
01110_1_1000_0110_0000_00000000000000   // LOAD  REG[8] = MEM[REG[6]] → MEM[3]
01111_1_0111_1001_0000_00000000000000   // STORE MEM[REG[9]] = REG[7] → MEM[2] = REG[7] = -4 = 32'hFFFFFFFC
